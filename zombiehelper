pragma solidity >=0.5.0 <0.6.0;

import "./zombiefeeding.sol";

contract ZombieHelper is ZombieFeeding {

  // Let's try making our own modifier that uses the zombie level property to restrict access to special abilities.
  modifier aboveLevel (uint _level, uint _zombieId){
    require (zombies[_zombieId].level >= _level);
    //Remember to have the last line of the modifier call the rest of the function with _;
    _;
  }
  // Our game will have some incentives for people to level up their zombies:
//For zombies level 2 and higher, users will be able to change their name.
  function changeName(uint _zombieId, string calldata _newName) external aboveLevel(2, _zombieId){
    require(msg.sender == zombieToOwner[_zombieId]);
    zombies[_zombieId].name = _newName; 
  }

//For zombies level 20 and higher, users will be able to give them custom DNA.Start here
  function changeDna(uint _zombieId, uint _newDna) external aboveLevel(20, _zombieId){
    require(msg.sender == zombieToOwner[_zombieId]);
    zombies[_zombieId].dna = _newDna; 
  } 
  
   // Let's add one more function: our DApp needs a method to view a user's entire zombie army — let's call it getZombiesByOwner.
  //This function will only need to read data from the blockchain, so we can make it a view function. Which brings us to an important topic when talking about gas optimization:
  //view functions don't cost any gas when they're called externally by a user.This is because view functions don't actually change anything on the blockchain – they only read the data. 
  //Note: If a view function is called internally from another function in the same contract that is not a view function, it will still cost gas. This is because the other function creates a transaction on Ethereum, and will still need to be verified from every node. So view functions are only free when they're called externally.
  function getZombiesByOwner(address _owner) external view returns (uint[] memory) {
    
    //Declaring arrays in memory
    //You can use the memory keyword with arrays to create a new array inside a function without needing to write anything to storage. 
    //The array will only exist until the end of the function call, and this is a lot cheaper gas-wise than updating an array in storage — free if it's a view function called externally.
    //Note: memory arrays must be created with a length argument (in this example, 3). They currently cannot be resized like storage arrays can with array.push(), although this may be changed in a future version of Solidity.
    //In our getZombiesByOwner function, we want to return a uint[] array with all the zombies a particular user owns.
    uint[] memory result = new uint[](ownerZombieCount[_owner]);
    //Let's finish our getZombiesByOwner function by writing a for loop that iterates through all the 
    //zombies in our DApp, compares their owner to see if we have a match, and pushes them to our result array before returning it.
    uint counter = 0;
    for (uint i = 0; i < zombies.length; i++) {
     if (zombieToOwner[i] == _owner){
       result[counter] = i;
       counter++;
     }
    }
    return result;
  }
  }


}
